Using TRIE

//User function Template for C++

class TrieNode{
    public:
        TrieNode* children[26];
};


TrieNode* getNode(){
    TrieNode* pNode=new TrieNode();
    for(int i=0;i<26;i++){
        pNode->children[i]=NULL;
    }
    return pNode;
}

void insert(TrieNode* root,string key){
    TrieNode* pCrawl=root;
    for(int i=0;i<key.length();i++){
        int index=key[i]-'a';
        if(!pCrawl->children[index])//If there is no node for key make one
            pCrawl->children[index]=getNode();
        pCrawl=pCrawl->children[index];    
    }
}

bool search(TrieNode* root,string key){
    TrieNode *pCrawl=root;
    for(int i=0;i<key.length();i++){
        int index=key[i]-'a';
        if(!pCrawl->children[index]) return false;
        pCrawl=pCrawl->children[index];
    }
    
    return true;
}


class Solution{
public:

    int prefixSuffixString(vector<string> &s1,vector<string> s2){
        // Code here
        TrieNode * root=getNode();
        int ans=0;
        
        //For inserting into the trie
        for(auto str:s1){
            insert(root,str);
            reverse(str.begin(),str.end());
            insert(root,str);
        }
        
        //For searching in the trie
        for(auto str:s2){
            string rev=str;
            reverse(rev.begin(),rev.end());
            if(search(root,rev) or search(root,str))
                ans++;
        }
        
        return ans;  //Time O(N1+N2)*O(keylength)
    }
};




brute force approach 

    int prefixSuffixString(vector<string> &s1,vector<string> s2){
        // Code here
        //first approach brute force search
        int ans=0;
        for(auto x:s2){
            for(auto c:s1){
                if(x.length()<=c.length()){
                    if(c.substr(0,x.length())==x || c.substr(c.length()-x.length())==x){
                        ans++;
                        break;
                    }
                }
            }
        }
        
        return ans;
    }