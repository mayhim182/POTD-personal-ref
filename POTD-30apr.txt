Failed Approach!
class Solution{
public:
    int powerfullInteger(int n,vector<vector<int>> &intervals,int k){
        // Code here
        unordered_map<int,int> mp;
        sort(intervals.begin(),intervals.end());
        if(k==1) return intervals[n-1][1];
        
        for(int i=0;i<n-1;i++){
            if(intervals[i][1]>=intervals[i+1][0]){
                for(int j=intervals[i+1][0];j<=intervals[i][1];j++){
                    if(mp.find(j)!=mp.end()){
                        mp[j]+=1;
                        continue;
                    }
                    mp[j]+=2;
                }
            }
            else{
                mp[intervals[i][1]]++;
            }
        }
        
        // mp[intervals[n-1][1]]++;
        
        int ans=-1;
        
        for(auto x:mp){
            // cout<<x.first<<' '<<x.second<<'\n';
            if(x.second>=k){
                ans=max(ans,x.first);
            }
        }
        
        return ans;
    }
};