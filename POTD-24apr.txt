class Solution {
public:
    vector<int> nearestSmallerTower(vector<int> a) {
        int i, n=a.size();
        stack<int> st;
        vector<int> ans(n, -1);
        for(i=n-1;i>=0;i--) {
            while(st.size() && a[st.top()]>=a[i]) st.pop();
            ans[i]=(st.size())?st.top():-1;
            st.push(i);
        }
        while(st.size()) st.pop();
        for(i=0;i<n;i++) {
            while(st.size() && a[st.top()]>=a[i]) st.pop();
            if(st.size()) {
                if(ans[i]==-1) ans[i]=st.top();
                else {
                    int index=st.top();
                    if((i-index)<(ans[i]-i)) ans[i]=index;
                    else if((i-index)==(ans[i]-i)) {
                        if(a[index]<=a[ans[i]]) ans[i]=index;
                    }
                }
            }
            st.push(i);
        }
        return ans;
    }
};



Expected approach:

class Solution
{
public:
    vector<int> nearestSmallerTower(vector<int> &arr)
    {
        int n = arr.size();
        stack<int> pre, suf;
        vector<int> res(n, -1);

        for (int i = 0; i < n; i++)
        {
            while (!pre.empty() && arr[pre.top()] >= arr[i])
            {
                pre.pop();
            }

            if (!pre.empty())
            {
                res[i] = pre.top();
            }

            pre.push(i);
        }

        for (int i = n - 1; i >= 0; i--)
        {
            while (!suf.empty() && arr[suf.top()] >= arr[i])
            {
                suf.pop();
            }

            if (!suf.empty())
            {

                if (res[i] != -1)
                {
                    if (abs(res[i] - i) == abs(suf.top() - i))
                    {
                        if (arr[res[i]] > arr[suf.top()])
                            res[i] = suf.top();
                    }
                    else if (abs(res[i] - i) > abs(suf.top() - i))
                        res[i] = suf.top();
                }
                else
                    res[i] = suf.top();
            }

            suf.push(i);
        }

        return res;
    }
};